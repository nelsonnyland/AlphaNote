GIT

Documentation:
https://git-scm.com/docs

Notes:
- Follow directions in "Publish" to begin new repository or "Clone" to use one created.
- Configure git using commands below. Line endings can become an issue,
  so set line endings to automatically be corrected for Windows environment.

Configure:
git config --global user.name "myusername"                Set username
git config --global user.email "myemail@gmail.com"     Set email
git config --global --list                                  Check changes
git config --global core.autocrlf [bool]                    Set line endings (true/false)

.gitignore:
- File must be called ".gitignore"
*.txt                                                               Ignores all .txt files
node_modules/                                                       Ignores folder and contents

COMMANDS
Publish:
1. Create a new repo on GitHub.
2. Commands:
   git init
   git add README.md
   git add .
   git commit -m "Init Commit"
3. Copy repo url from GitHub:
   git remote add origin [repo url]
   git push -u origin master

Clone:
- cd to appropriate dir.
git clone [repo url]

Fetch:
git fetch                               Shows the incoming commits from remote

Pull:
git pull [remote] [branch]
git pull origin master

Stage:
git add [.]                             Stages changes specified [.] = all

Commit:
git commit -m "Init Commit"

Push:
git push [-u] [remote] [branch]         [-u] = default branch for "git push"
git push origin master

Checkout:
git checkout [.]                        Checks out branch (. = master)

Branch:
git branch [new-branch]                 Creates a new branch based on master
git branch [new-branch] [base-branch]   Creates a new branch based on branch specified

Merge:
git merge [branch]                      Merges with indicated branch

Stash:
git stash                               Stashes changes for pulling changed master
git stash list                          Lists stashed changes 
git stash show                          Show stashed changes

Revert:
git revert [commit]

Remove & Add Repo Connection:
git [remote] rm [branch]                Remove files from the working tree and from the index 
                                        (detaches branch connections, usually for the purpose of transporting a repo)
git [remote] add [origin]               Adds files to the working tree and the index
                                        (reconnects branch connections, usually for the purpose of transporting a repo)

Logs:
git remote                              Shows the remote branches available
git status                              Shows the status of changes to repo
git log                                 Shows history of commits in order from HEAD
git reflog                              Shows local history

Tag:
https://git-scm.com/book/en/v2/Git-Basics-Tagging
git tag                                 Lists the current tags for repo (alphabetically)
git tag -l "[search]"                   Lists matching tags for repo [*] = wildcard
git tag [tag]                           Creates tag
git tag -a [tag] -m "[message]"         Creates annotated tag
git show [tag]                          Shows the contents of an annotated tag
git push [branch] [tag]                 Push tag to branch
git tag -d [tag]                        Delete tag
git push [branch] :refs/tags/[tag]      Update remote branch with delete

Troubleshooting:
- Unsafe Directory (if Git repo is not appearing or is unwilling to attach to for being "unsafe")
1. Close out IDE.
2. Open Developer PowerShell window and run the following command: (copy and paste from git output window)
    git config --global --add safe.directory [path to root dir]
3. Open git bash window as admin and run the following command:
    GIT_TEST_DEBUG_UNSAFE_DIRECTORIES=true
4. Open IDE.

================================================================================
git help:
git [--version] [--help] [-C <path>] [-c <name>=<value>]
    [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]    
    [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
    [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]       
    <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone      Clone a repository into a new directory
   init       Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add        Add file contents to the index
   mv         Move or rename a file, a directory, or a symlink
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect     Use binary search to find the commit that introduced a bug
   grep       Print lines matching a pattern
   log        Show commit logs
   show       Show various types of objects
   status     Show the working tree status

grow, mark and tweak your common history
   branch     List, create, or delete branches
   checkout   Switch branches or restore working tree files
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   merge      Join two or more development histories together
   rebase     Reapply commits on top of another base tip
   tag        Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch      Download objects and refs from another repository
   pull       Fetch from and integrate with another repository or a local branch
   push       Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.